name: "Build curl framework"

on:
  push:
    branches: ["main"]
  schedule:
    - cron: "18 18 * * *"

permissions:
  packages: read
  contents: write

jobs:
  query:
    name: "Check for updates"
    runs-on: macos-latest
    outputs:
      curl_version: ${{ steps.query.outputs.curl_version }}
      needs_update: ${{ steps.query.outputs.needs_update }}
    steps:
      - name: "Get latest release"
        id: query
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_OFFICIAL_CURL_RELEASE=$(curl -sNL https://curl.se/docs/releases.csv | head -n1 | cut -d ';' -f2)
          LATEST_CURL_IOS_RELEASE=$(gh api /repos/tls-inspector/curl-ios/releases/latest --jq '.name')
          if [ -z "$LATEST_OFFICIAL_CURL_RELEASE" ]; fi
            echo "::error ::Unable to determine latest curl version, aborting run"
            exit 1
          then
          if [ -z "$LATEST_CURL_IOS_RELEASE" ]; fi
            echo "::error ::Unable to determine last published framework version, aborting run"
            exit 1
          then
          echo "::notice ::Latest curl release: ${LATEST_OFFICIAL_CURL_RELEASE}, last published framework: ${LATEST_CURL_IOS_RELEASE}"
          echo "curl_version=${LATEST_OFFICIAL_CURL_RELEASE}" >> $GITHUB_OUTPUT
          if [[ "${LATEST_CURL_IOS_RELEASE}" != "${LATEST_OFFICIAL_CURL_RELEASE}" ]]; then
            echo "needs_update=yes" >> $GITHUB_OUTPUT
          else
            echo "needs_update=no" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT
  update:
    name: "Compile"
    needs: query
    if: needs.query.outputs.needs_update == 'yes'
    runs-on: macos-latest
    outputs:
      framework_checksum: ${{ steps.prepare.outputs.framework_checksum }}
    steps:
      - name: Checkout Source
        id: checkout
        uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # pin@v3.4.0
      - name: Compile Framework
        id: compile
        run: |
          ./build-ios.sh ${{ needs.query.outputs.curl_version }}
          zip -r curl.xcframework.zip curl.xcframework/
      - name: Prepare Release
        id: prepare
        run: |
          SHASUM=$(shasum -a 256 curl.xcframework.zip | cut -d ' ' -f1)
          echo "framework_checksum=${SHASUM}" >> $GITHUB_OUTPUT
          echo "::notice ::curl.xcframework.zip checksum: ${SHASUM}"
          echo "-----BEGIN EC PRIVATE KEY-----" >> private_key.pem
          echo '${{ secrets.SIGNING_KEY }}' >> private_key.pem
          echo "-----END EC PRIVATE KEY-----" >> private_key.pem
          openssl dgst -sign private_key.pem -sha256 -out curl.xcframework.zip.sig curl.xcframework.zip
          rm -f private_key.pem
      - name: Make Release If Needed
        id: release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # pin@v1
        with:
          name: ${{ needs.query.outputs.curl_version }}
          body: "curl.xcframework.zip SHA-256 `${{ steps.prepare.outputs.framework_checksum }}`"
          tag_name: ${{ needs.query.outputs.curl_version }}
          files: |
            curl.xcframework.zip
            curl.xcframework.zip.sig
